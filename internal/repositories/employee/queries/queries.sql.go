// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package employee

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee
    (name, surname, phone, company_id, department_id, passport_id)
VALUES
    ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateEmployeeParams struct {
	Name         pgtype.Text `json:"name"`
	Surname      pgtype.Text `json:"surname"`
	Phone        pgtype.Text `json:"phone"`
	CompanyID    pgtype.Int4 `json:"company_id"`
	DepartmentID pgtype.Int4 `json:"department_id"`
	PassportID   pgtype.Int4 `json:"passport_id"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (int32, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.Name,
		arg.Surname,
		arg.Phone,
		arg.CompanyID,
		arg.DepartmentID,
		arg.PassportID,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createPassport = `-- name: CreatePassport :one
INSERT INTO passport
    (number, type)
VALUES
    ($1, $2)
RETURNING id
`

type CreatePassportParams struct {
	Number pgtype.Text `json:"number"`
	Type   pgtype.Text `json:"type"`
}

func (q *Queries) CreatePassport(ctx context.Context, arg CreatePassportParams) (int32, error) {
	row := q.db.QueryRow(ctx, createPassport, arg.Number, arg.Type)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee e
WHERE e.id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getDepartmentById = `-- name: GetDepartmentById :one
SELECT 
    d.name, d.phone
FROM department d
WHERE d.id = $1
`

type GetDepartmentByIdRow struct {
	Name  pgtype.Text `json:"name"`
	Phone pgtype.Text `json:"phone"`
}

func (q *Queries) GetDepartmentById(ctx context.Context, id int32) (GetDepartmentByIdRow, error) {
	row := q.db.QueryRow(ctx, getDepartmentById, id)
	var i GetDepartmentByIdRow
	err := row.Scan(&i.Name, &i.Phone)
	return i, err
}

const getEmployeeById = `-- name: GetEmployeeById :one
SELECT 
    e.id, e.name, e.surname, e.phone, e.company_id, e.passport_id, e.department_id
FROM employee e
WHERE e.id = $1
`

func (q *Queries) GetEmployeeById(ctx context.Context, id int32) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployeeById, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Phone,
		&i.CompanyID,
		&i.PassportID,
		&i.DepartmentID,
	)
	return i, err
}

const getEmployeesByCompany = `-- name: GetEmployeesByCompany :many
SELECT 
    e.id, e.name, e.surname, e.phone, e.company_id,
    d.name AS department_name, 
    d.phone AS department_phone,
    p.number AS passport_number, 
    p.type AS passport_type
FROM employee e
JOIN department d ON d.id = e.department_id
JOIN passport p ON p.id = e.passport_id
WHERE e.company_id = $1
`

type GetEmployeesByCompanyRow struct {
	ID              int32       `json:"id"`
	Name            pgtype.Text `json:"name"`
	Surname         pgtype.Text `json:"surname"`
	Phone           pgtype.Text `json:"phone"`
	CompanyID       pgtype.Int4 `json:"company_id"`
	DepartmentName  pgtype.Text `json:"department_name"`
	DepartmentPhone pgtype.Text `json:"department_phone"`
	PassportNumber  pgtype.Text `json:"passport_number"`
	PassportType    pgtype.Text `json:"passport_type"`
}

func (q *Queries) GetEmployeesByCompany(ctx context.Context, companyID pgtype.Int4) ([]GetEmployeesByCompanyRow, error) {
	rows, err := q.db.Query(ctx, getEmployeesByCompany, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEmployeesByCompanyRow
	for rows.Next() {
		var i GetEmployeesByCompanyRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Phone,
			&i.CompanyID,
			&i.DepartmentName,
			&i.DepartmentPhone,
			&i.PassportNumber,
			&i.PassportType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmployeesByCompanyDepartment = `-- name: GetEmployeesByCompanyDepartment :many
SELECT 
    e.id, e.name, e.surname, e.phone, e.company_id,
    d.name AS department_name, 
    d.phone AS department_phone,
    p.number AS passport_number, 
    p.type AS passport_type
FROM employee e
JOIN department d ON d.id = e.department_id
JOIN passport p ON p.id = e.passport_id
WHERE e.company_id = $1 AND d.name = $2
`

type GetEmployeesByCompanyDepartmentParams struct {
	CompanyID pgtype.Int4 `json:"company_id"`
	Name      pgtype.Text `json:"name"`
}

type GetEmployeesByCompanyDepartmentRow struct {
	ID              int32       `json:"id"`
	Name            pgtype.Text `json:"name"`
	Surname         pgtype.Text `json:"surname"`
	Phone           pgtype.Text `json:"phone"`
	CompanyID       pgtype.Int4 `json:"company_id"`
	DepartmentName  pgtype.Text `json:"department_name"`
	DepartmentPhone pgtype.Text `json:"department_phone"`
	PassportNumber  pgtype.Text `json:"passport_number"`
	PassportType    pgtype.Text `json:"passport_type"`
}

func (q *Queries) GetEmployeesByCompanyDepartment(ctx context.Context, arg GetEmployeesByCompanyDepartmentParams) ([]GetEmployeesByCompanyDepartmentRow, error) {
	rows, err := q.db.Query(ctx, getEmployeesByCompanyDepartment, arg.CompanyID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEmployeesByCompanyDepartmentRow
	for rows.Next() {
		var i GetEmployeesByCompanyDepartmentRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Phone,
			&i.CompanyID,
			&i.DepartmentName,
			&i.DepartmentPhone,
			&i.PassportNumber,
			&i.PassportType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrCreateDepartment = `-- name: GetOrCreateDepartment :one
WITH existing_department AS (
    SELECT d.id
    FROM department d
    WHERE d.name = $1 AND d.phone = $2
),
new_department AS (
    INSERT INTO department (name, phone)
    SELECT $1, $2
    WHERE NOT EXISTS (SELECT id FROM existing_department)
    RETURNING id
)
SELECT id FROM existing_department
UNION ALL
SELECT id FROM new_department
`

type GetOrCreateDepartmentParams struct {
	Name  pgtype.Text `json:"name"`
	Phone pgtype.Text `json:"phone"`
}

func (q *Queries) GetOrCreateDepartment(ctx context.Context, arg GetOrCreateDepartmentParams) (int32, error) {
	row := q.db.QueryRow(ctx, getOrCreateDepartment, arg.Name, arg.Phone)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getPassportById = `-- name: GetPassportById :one
SELECT 
    p.number, p.type
FROM passport p
WHERE p.id = $1
`

type GetPassportByIdRow struct {
	Number pgtype.Text `json:"number"`
	Type   pgtype.Text `json:"type"`
}

func (q *Queries) GetPassportById(ctx context.Context, id int32) (GetPassportByIdRow, error) {
	row := q.db.QueryRow(ctx, getPassportById, id)
	var i GetPassportByIdRow
	err := row.Scan(&i.Number, &i.Type)
	return i, err
}

const updateDepartment = `-- name: UpdateDepartment :exec
UPDATE department
SET
    name = $2,
    phone = $3
WHERE id = $1
`

type UpdateDepartmentParams struct {
	ID    int32       `json:"id"`
	Name  pgtype.Text `json:"name"`
	Phone pgtype.Text `json:"phone"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) error {
	_, err := q.db.Exec(ctx, updateDepartment, arg.ID, arg.Name, arg.Phone)
	return err
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employee
SET
    name = $2,
    surname = $3,
    phone = $4,
    company_id = $5
WHERE id = $1
`

type UpdateEmployeeParams struct {
	ID        int32       `json:"id"`
	Name      pgtype.Text `json:"name"`
	Surname   pgtype.Text `json:"surname"`
	Phone     pgtype.Text `json:"phone"`
	CompanyID pgtype.Int4 `json:"company_id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.Exec(ctx, updateEmployee,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Phone,
		arg.CompanyID,
	)
	return err
}

const updatePassport = `-- name: UpdatePassport :exec
UPDATE passport
SET
    number = $2,
    type = $3
WHERE id = $1
`

type UpdatePassportParams struct {
	ID     int32       `json:"id"`
	Number pgtype.Text `json:"number"`
	Type   pgtype.Text `json:"type"`
}

func (q *Queries) UpdatePassport(ctx context.Context, arg UpdatePassportParams) error {
	_, err := q.db.Exec(ctx, updatePassport, arg.ID, arg.Number, arg.Type)
	return err
}
